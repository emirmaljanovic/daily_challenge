{"id":"challenges\\pentagonalNumber.js","dependencies":[{"name":"D:\\Programming\\daily_challenge\\package.json","includedInParent":true,"mtime":1535641718157}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Challenge\n * \n * Using the JavaScript language, have the function PentagonalNumber(num) read num which will be a positive integer and determine how many dots exist in a pentagonal \n * shape around a center dot on the Nth iteration. For example, in the image below you can see that on the first iteration there is only a single dot, on the second iteration \n * there are 6 dots, on the third there are 16 dots, and on the fourth there are 31 dots. \n *\n *          *\n *    *   * * *\n *         * *\n\n * Your program should return the number of dots that exist in the whole pentagon on the Nth iteration. \n */\n\n/**\n * Formula:\n * numberOfDots = b + ((num * 5) - 5)\n * numberOfDots - number of dots\n * before - whatever we had before (default 1)\n * num - number of iterations\n * @param {Number} num - the number of iterations\n * @returns {Number} numberOfDots\n */\nvar pentagonalNumber = function pentagonalNumber(num) {\n  var before = 1;\n\n  var getNumberOfDots = function getNumberOfDots(iteration) {\n    return iteration * 5 - 5;\n  };\n\n  // Calculate number of dots for all previous iterations\n  for (var i = 1; i < num; i++) {\n    before += getNumberOfDots(i);\n  }\n\n  return before + getNumberOfDots(num);\n};\n\nexports.default = pentagonalNumber;","map":{"mappings":[{"generated":{"line":6,"column":0},"source":"challenges\\pentagonalNumber.js","original":{"line":1,"column":0}},{"generated":{"line":20,"column":0},"source":"challenges\\pentagonalNumber.js","original":{"line":15,"column":1}},{"generated":{"line":29,"column":0},"source":"challenges\\pentagonalNumber.js","original":{"line":24,"column":0}},{"name":"pentagonalNumber","generated":{"line":29,"column":4},"source":"challenges\\pentagonalNumber.js","original":{"line":24,"column":6}},{"generated":{"line":29,"column":23},"source":"challenges\\pentagonalNumber.js","original":{"line":24,"column":25}},{"name":"pentagonalNumber","generated":{"line":29,"column":32},"source":"challenges\\pentagonalNumber.js","original":{"line":24,"column":6}},{"generated":{"line":29,"column":48},"source":"challenges\\pentagonalNumber.js","original":{"line":24,"column":25}},{"generated":{"line":29,"column":54},"source":"challenges\\pentagonalNumber.js","original":{"line":24,"column":32}},{"generated":{"line":30,"column":0},"source":"challenges\\pentagonalNumber.js","original":{"line":25,"column":2}},{"name":"before","generated":{"line":30,"column":6},"source":"challenges\\pentagonalNumber.js","original":{"line":25,"column":6}},{"generated":{"line":30,"column":15},"source":"challenges\\pentagonalNumber.js","original":{"line":25,"column":15}},{"generated":{"line":30,"column":16},"source":"challenges\\pentagonalNumber.js","original":{"line":25,"column":2}},{"generated":{"line":32,"column":0},"source":"challenges\\pentagonalNumber.js","original":{"line":27,"column":2}},{"name":"getNumberOfDots","generated":{"line":32,"column":6},"source":"challenges\\pentagonalNumber.js","original":{"line":27,"column":8}},{"generated":{"line":32,"column":24},"source":"challenges\\pentagonalNumber.js","original":{"line":27,"column":26}},{"name":"getNumberOfDots","generated":{"line":32,"column":33},"source":"challenges\\pentagonalNumber.js","original":{"line":27,"column":8}},{"generated":{"line":32,"column":48},"source":"challenges\\pentagonalNumber.js","original":{"line":27,"column":26}},{"generated":{"line":33,"column":0},"source":"challenges\\pentagonalNumber.js","original":{"line":27,"column":26}},{"name":"iteration","generated":{"line":33,"column":11},"source":"challenges\\pentagonalNumber.js","original":{"line":27,"column":40}},{"generated":{"line":33,"column":23},"source":"challenges\\pentagonalNumber.js","original":{"line":27,"column":52}},{"generated":{"line":33,"column":24},"source":"challenges\\pentagonalNumber.js","original":{"line":27,"column":39}},{"generated":{"line":33,"column":27},"source":"challenges\\pentagonalNumber.js","original":{"line":27,"column":57}},{"generated":{"line":33,"column":28},"source":"challenges\\pentagonalNumber.js","original":{"line":27,"column":26}},{"generated":{"line":34,"column":0},"source":"challenges\\pentagonalNumber.js","original":{"line":27,"column":26}},{"generated":{"line":34,"column":3},"source":"challenges\\pentagonalNumber.js","original":{"line":27,"column":2}},{"generated":{"line":36,"column":0},"source":"challenges\\pentagonalNumber.js","original":{"line":29,"column":2}},{"generated":{"line":37,"column":0},"source":"challenges\\pentagonalNumber.js","original":{"line":30,"column":2}},{"generated":{"line":37,"column":7},"source":"challenges\\pentagonalNumber.js","original":{"line":30,"column":7}},{"name":"i","generated":{"line":37,"column":11},"source":"challenges\\pentagonalNumber.js","original":{"line":30,"column":11}},{"generated":{"line":37,"column":15},"source":"challenges\\pentagonalNumber.js","original":{"line":30,"column":15}},{"generated":{"line":37,"column":16},"source":"challenges\\pentagonalNumber.js","original":{"line":30,"column":2}},{"name":"i","generated":{"line":37,"column":18},"source":"challenges\\pentagonalNumber.js","original":{"line":30,"column":18}},{"name":"num","generated":{"line":37,"column":22},"source":"challenges\\pentagonalNumber.js","original":{"line":30,"column":22}},{"generated":{"line":37,"column":25},"source":"challenges\\pentagonalNumber.js","original":{"line":30,"column":2}},{"name":"i","generated":{"line":37,"column":27},"source":"challenges\\pentagonalNumber.js","original":{"line":30,"column":27}},{"generated":{"line":37,"column":30},"source":"challenges\\pentagonalNumber.js","original":{"line":30,"column":2}},{"generated":{"line":37,"column":32},"source":"challenges\\pentagonalNumber.js","original":{"line":30,"column":32}},{"name":"before","generated":{"line":38,"column":0},"source":"challenges\\pentagonalNumber.js","original":{"line":31,"column":4}},{"name":"getNumberOfDots","generated":{"line":38,"column":14},"source":"challenges\\pentagonalNumber.js","original":{"line":31,"column":14}},{"name":"i","generated":{"line":38,"column":30},"source":"challenges\\pentagonalNumber.js","original":{"line":31,"column":30}},{"generated":{"line":38,"column":31},"source":"challenges\\pentagonalNumber.js","original":{"line":31,"column":14}},{"generated":{"line":38,"column":32},"source":"challenges\\pentagonalNumber.js","original":{"line":31,"column":4}},{"generated":{"line":39,"column":0},"source":"challenges\\pentagonalNumber.js","original":{"line":32,"column":3}},{"generated":{"line":41,"column":0},"source":"challenges\\pentagonalNumber.js","original":{"line":34,"column":2}},{"name":"before","generated":{"line":41,"column":9},"source":"challenges\\pentagonalNumber.js","original":{"line":34,"column":9}},{"name":"getNumberOfDots","generated":{"line":41,"column":18},"source":"challenges\\pentagonalNumber.js","original":{"line":34,"column":18}},{"name":"num","generated":{"line":41,"column":34},"source":"challenges\\pentagonalNumber.js","original":{"line":34,"column":34}},{"generated":{"line":41,"column":37},"source":"challenges\\pentagonalNumber.js","original":{"line":34,"column":18}},{"generated":{"line":41,"column":38},"source":"challenges\\pentagonalNumber.js","original":{"line":34,"column":2}},{"generated":{"line":42,"column":0},"source":"challenges\\pentagonalNumber.js","original":{"line":35,"column":1}},{"generated":{"line":42,"column":1},"source":"challenges\\pentagonalNumber.js","original":{"line":24,"column":0}},{"name":"pentagonalNumber","generated":{"line":44,"column":18},"source":"challenges\\pentagonalNumber.js","original":{"line":37,"column":15}}],"sources":{"challenges\\pentagonalNumber.js":"/**\n * Challenge\n * \n * Using the JavaScript language, have the function PentagonalNumber(num) read num which will be a positive integer and determine how many dots exist in a pentagonal \n * shape around a center dot on the Nth iteration. For example, in the image below you can see that on the first iteration there is only a single dot, on the second iteration \n * there are 6 dots, on the third there are 16 dots, and on the fourth there are 31 dots. \n *\n *          *\n *    *   * * *\n *         * *\n\n * Your program should return the number of dots that exist in the whole pentagon on the Nth iteration. \n */\n\n /**\n  * Formula:\n  * numberOfDots = b + ((num * 5) - 5)\n  * numberOfDots - number of dots\n  * before - whatever we had before (default 1)\n  * num - number of iterations\n  * @param {Number} num - the number of iterations\n  * @returns {Number} numberOfDots\n  */\nconst pentagonalNumber = num => {\n  let before = 1;\n\n  const getNumberOfDots = iteration => (iteration * 5) - 5;\n\n  // Calculate number of dots for all previous iterations\n  for (let i = 1; i < num; i++) {\n    before += getNumberOfDots(i);\n  }\n\n  return before + getNumberOfDots(num);\n};\n\nexport default pentagonalNumber;"},"lineCount":null}},"hash":"a8b34b4dd9cd77899e4af8e57ef7aafb","cacheData":{"env":{}}}