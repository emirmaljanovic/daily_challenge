[
  {
    "title": "Challenge 1 - longestWord",
    "description": "Have the function LongestWord(sen) take the sen parameter being passed and return the largest word in the string. If there are two or more words that are the same length, return the first word from the string with that length. Ignore punctuation and assume sen will not be empty."
  },
  {
    "title": "Challenge 2 - firstFactorial",
    "description": "Have the function FirstFactorial(num) take the num parameter being passed and return the factorial of it (e.g. if num = 4, return (4 * 3 * 2 * 1)). For the test cases, the range will be between 1 and 18 and the input will always be an integer."
  },
  {
    "title": "Challenge 3 - firstReverse",
    "description": "Have the function FirstReverse(str) take the str parameter being passed and return the string in reversed order. For example: if the input string is 'Hello World and Coders' then your program should return the string sredoC dna dlroW olleH."
  },
  {
    "title": "Challenge 4 - letterChanges",
    "description": "Have the function LetterChanges(str) take the str parameter being passed and modify it using the following algorithm. Replace every letter in the string with the letter following it in the alphabet (ie. c becomes d, z becomes a). Then capitalize every vowel in this new string (a, e, i, o, u) and finally return this modified string."
  },
  {
    "title": "Challenge 5 - simpleAdding",
    "description": "Have the function SimpleAdding(num) add up all the numbers from 1 to num. For example: if the input is 4 then your program should return 10 because 1 + 2 + 3 + 4 = 10. For the test cases, the parameter num will be any number from 1 to 1000."
  },
  {
    "title": "Challenge 6 - letterCapitalize",
    "description": "Have the function LetterCapitalize(str) take the str parameter being passed and capitalize the first letter of each word. Words will be separated by only one space."
  },
  {
    "title": "Challenge 7 - simpleSymbols",
    "description": "Have the function SimpleSymbols(str) take the str parameter being passed and determine if it is an acceptable sequence by either returning the string true or false. The str parameter will be composed of + and = symbols with several letters between them (ie. ++d+===+c++==a) and for the string to be true each letter must be surrounded by a + symbol. So the string to the left would be false. The string will not be empty and will have at least one letter."
  },
  {
    "title": "Challenge 8 - checkNums",
    "description": "Have the function CheckNums(num1,num2) take both parameters being passed and return the string true if num2 is greater than num1, otherwise return the string false. If the parameter values are equal to each other then return the string -1."
  },
  {
    "title": "Challenge 9 - timeConvert",
    "description": "Have the function TimeConvert(num) take the num parameter being passed and return the number of hours and minutes the parameter converts to (ie. if num = 63 then the output should be 1:3). Separate the number of hours and minutes with a colon."
  },
  {
    "title": "Challenge 10 - alphabetSoup",
    "description": "Have the function AlphabetSoup(str) take the str string parameter being passed and return the string with the letters in alphabetical order (ie. hello becomes ehllo). Assume numbers and punctuation symbols will not be included in the string."
  },
  {
    "title": "Challenge 11 - kaprekarsConstant",
    "description": "Have the function KaprekarsConstant(num) take the num parameter being passed which will be a 4-digit number with at least two distinct digits. Your program should perform the following routine on the number: Arrange the digits in descending order and in ascending order (adding zeroes to fit it to a 4-digit number), and subtract the smaller number from the bigger number. Then repeat the previous step. Performing this routine will always cause you to reach a fixed number: 6174. Then performing the routine on 6174 will always give you 6174 (7641 - 1467 = 6174). Your program should return the number of times this routine must be performed until 6174 is reached.\n For example: \nif num is 3524 your program should return 3 because of the following steps: \n(1) 5432 - 2345 = 3087, \n(2) 8730 - 0378 = 8352, \n(3) 8532 - 2358 = 6174."
  },
  {
    "title": "Challenge 12 - chessboardTraveling",
    "description": "Have the function ChessboardTraveling(str) read str which will be a string consisting of the location of a space on a standard 8x8 chess board with no pieces on the board along with another space on the chess board. The structure of str will be the following: '(x y)(a b)' where (x y) represents the position you are currently on with x and y ranging from 1 to 8 and (a b) represents some other space on the chess board with a and b also ranging from 1 to 8 where a > x and b > y. Your program should determine how many ways there are of traveling from (x y) on the board to (a b) moving only up and to the right. For example: if str is (1 1)(2 2) then your program should output 2 because there are only two possible ways to travel from space (1 1) on a chessboard to space (2 2) while making only moves up and to the right."
  },
  {
    "title": "Challenge 13 - maximalSquare",
    "description": "Have the function MaximalSquare(strArr) take the strArr parameter being passed which will be a 2D matrix of 0 and 1's, and determine the area of the largest square submatrix that contains all 1's. A square submatrix is one of equal width and height, and your program should return the area of the largest submatrix that contains only 1's. For example: if strArr is ['10100', '10111', '11111', '10010'] then this looks like the following matrix: \n\n 1 0 1 0 0 \n 1 0 1 1 1 \n 1 1 1 1 1 \n 1 0 0 1 0 \n\n For the input above, you can see the bolded 1's create the largest square submatrix of size 2x2, so your program should return the area which is 4. You can assume the input will not be empty."
  },
  {
    "title": "Challenge 14 - pentagonalNumber",
    "description": "Have the function PentagonalNumber(num) read num which will be a positive integer and determine how many dots exist in a pentagonal shape around a center dot on the Nth iteration. For example, in the image below you can see that on the first iteration there is only a single dot, on the second iteration there are 6 dots, on the third there are 16 dots, and on the fourth there are 31 dots. \n\n Your program should return the number of dots that exist in the whole pentagon on the Nth iteration. "
  },
  {
    "title": "Challenge 15 - sumInArray",
    "description": "Given a list of numbers and a number k, return whether any two numbers from the list add up to k. For example, given [10, 15, 3, 7] and k of 17, return true since 10 + 7 is 17. Bonus: Can you do this in one pass?"
  }
]